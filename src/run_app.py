from pathlib import Path
import time
import streamlit as st
from faster_whisper import WhisperModel
from pytube import YouTube
from utils.cuda_checker import check_cuda
from transformers import pipeline


def save_uploaded_file(uploaded_file):
    """
        uploaded_file : file uploaded via streamlit.file_uploader()

        Return : str
            absolute filepath to the new uploaded file.

        Comment: save the new uploaded file into local drive and provide its filepath.
    """
    # specify the directory
    dir_path = Path('../media')
    dir_path.mkdir(parents=True, exist_ok=True)  # create directory if it does not exist

    # create a path object for the file
    file_path = dir_path / uploaded_file.name

    # write the file
    with file_path.open("wb") as f:
        f.write(uploaded_file.getbuffer())

    st.toast(f"Saved file: {file_path}")

    return file_path


st.markdown('### üìñ –ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –≥—Ä—É–ø–ø—ã 1.12')

uploaded_file_path = ''
with st.container():
    st.write('–í—ã–±–æ—Ä –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫–∏–±–∏—Ä–æ–≤–∞–Ω–∏—è')
    file_mode = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ", ['Local', 'URL'], index=0,
                             help='–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "Local" –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ "URL" –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ —Å YouTube.')
    if file_mode == 'Local':
        uploaded_file = st.file_uploader('üîΩ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞',
                                 type=['mp3', 'wav', 'mp4', 'webm'])

        if uploaded_file is not None:
            st.session_state['file_path'] = save_uploaded_file(uploaded_file)

    else:
        url = st.text_input('URL', help='–í–≤–µ–¥–∏—Ç–µ URL —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å YouTube')
        chosen = st.button('–í—ã–±—Ä–∞—Ç—å –≤–∏–¥–µ–æ')
        if chosen:
            tmp_dir_path = Path('media')
            tmp_dir_path.mkdir(parents=True, exist_ok=True)
            tmp_name = url.split('?v=')[1] + '.mp4'
            uploaded_file_path = tmp_dir_path / tmp_name
            st.session_state['file_path'] = uploaded_file_path
            yt = YouTube(url)
            stream = yt.streams.get_lowest_resolution()
            with st.spinner('–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ...'):
                stream.download(output_path=tmp_dir_path, filename=tmp_name)
                st.toast(f'–í–∏–¥–µ–æ —Å YouTube –∑–∞–≥—Ä—É–∂–µ–Ω–æ {uploaded_file_path}')

    with st.expander('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª'):
        summary_checkbox = st.checkbox('–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞', value=False)
        transcribe_text = ""
    
    transcribe = st.button('–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ!')

    if transcribe:
        time_start = time.time()
        uploaded_file_path = st.session_state['file_path']

        with st.spinner('üöö –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å. –ú–∏–Ω—É—Ç–∫—É...'):
            if check_cuda():
                selected_model_path = '../models/faster-whisper/large-v3/'
                local_device = 'cuda'
                selected_compute_type = 'int8_float16'
                st.toast(body='–û–±–Ω–∞—Ä—É–∂–µ–Ω GPU. –ë—É–¥–µ—Ç —É—Å–∫–æ—Ä—è—Ç—å—Å—è!',
                        icon='üöÄ')
            else:
                selected_model_path = '../models/faster-whisper/medium/'
                local_device = 'cpu'
                selected_compute_type = 'int8'
                st.toast(body='–û–±–Ω–∞—Ä—É–∂–µ–Ω CPU. –ü—Ä–∏–¥—ë—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å...',
                        icon='üêå')

            model = WhisperModel(
                                model_size_or_path=selected_model_path,
                                device=local_device,
                                compute_type=selected_compute_type,
                                num_workers=4,
                                local_files_only=True
                                )

        with st.spinner('üî¨ –ü–µ—Ä–≤–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞. –ú–∏–Ω—É—Ç–∫—É...'):
            segments, info = model.transcribe(audio=str(uploaded_file_path),
                                              beam_size=5)

        st.write(f"–Ø–∑—ã–∫ —Ä–µ—á–∏: {info.language} —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {info.language_probability}")

        st.write(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö: {info.duration}")

        progress_text = '‚è≥ –ò–¥—ë—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∞—É–¥–∏–æ'

        segments_bar = st.progress(0, text=progress_text)

        with st.expander('üìú –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Ç–µ–∫—Å—Ç–∞'):
            for segment in segments:
                st.write("[%.2fs -> %.2fs] %s" % (segment.start, segment.end, segment.text))
                curr_bar_val = min(segment.end / info.duration, 1.0)
                segments_bar.progress(curr_bar_val, text=progress_text)
                
                if summary_checkbox:
                    transcribe_text += segment.text + " "

            time_total = time.time() - time_start

            st.markdown(
            """
            <style>
                .stProgress > div > div > div > div {
                    background-color: green;
                }
            </style>""",
            unsafe_allow_html=True,
                    )
        
        with st.expander('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'):
            if summary_checkbox:
                summarizer = pipeline("summarization", model = "d0rj/rut5-base-summ")
                st.write("**–°—É–º–º–∞—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**  ", summarizer(transcribe_text)[0]['summary_text'])

        with st.expander('üõ† –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'):
            st.markdown(f'*–û–±—â–µ–µ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏*: {round(time_total)} —Å.')

